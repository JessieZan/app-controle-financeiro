{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from 'react';\n\nfunction useTasksListProvider() {\n  _s();\n\n  const [showFiltro, setShowFiltro] = useState(false);\n  const [showModal, setShowModal] = useState(false);\n  const [transactions, setTransactions] = useState([]);\n  const [transactionsOriginal, settransactionsOriginal] = useState([]);\n  const [transacInEditing, setTransacInEditing] = useState(false);\n  const [value, setValue] = useState('');\n  const [category, setCategory] = useState('');\n  const [date, setDate] = useState('');\n  const [description, setDescription] = useState('');\n  const [credit, setCredit] = useState(false);\n  const [debit, setDebit] = useState(true);\n  const [credits, setCredits] = useState([]);\n  const [debits, setDebits] = useState([]);\n  const [totalCredits, setTotalCredits] = useState(0);\n  const [totalDebits, setTotalDebits] = useState(0);\n  const [balance, setBalance] = useState(0);\n  const [categorias, setCategorias] = useState([]);\n  const [diasDaSemana, setDiasDaSemana] = useState(['Domingo', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sábado']);\n  useEffect(() => {\n    loadTransactions(); // loadCredits(transactions)\n    // loadDebits(transactions)\n  }, []);\n  useEffect(() => {\n    setTotalCredits(credits.reduce((total, item) => total + item.value, 0));\n    setTotalDebits(debits.reduce((total, item) => total + item.value, 0));\n    setBalance(totalCredits - totalDebits);\n  }, [credits, debits]);\n  useEffect(() => {\n    setBalance(totalCredits - totalDebits);\n  }, [totalCredits, totalDebits]);\n\n  async function loadCategories(transactions) {\n    const newCategories = transactions.map(transaction => transaction.category);\n    const uniqueCategories = [...new Set(newCategories)];\n    setCategorias(uniqueCategories);\n  }\n\n  async function loadCredits(transactions) {\n    setCredits(transactions.filter(transaction => transaction.type === 'credit'));\n  }\n\n  async function loadDebits(transactions) {\n    setDebits(transactions.filter(transaction => transaction.type === 'debit'));\n  }\n\n  async function loadTransactions() {\n    try {\n      const response = await fetch('http://localhost:3333/transactions', {\n        method: 'GET'\n      });\n      const data = await response.json();\n      setTransactions(data);\n      settransactionsOriginal(data);\n      loadCredits(data);\n      loadDebits(data);\n      loadCategories(data);\n      console.log(data);\n    } catch (error) {\n      console.log(error.message);\n    }\n  }\n\n  return {\n    showFiltro,\n    setShowFiltro,\n    showModal,\n    setShowModal,\n    transactions,\n    setTransactions,\n    transactionsOriginal,\n    settransactionsOriginal,\n    transacInEditing,\n    setTransacInEditing,\n    value,\n    setValue,\n    category,\n    setCategory,\n    date,\n    setDate,\n    description,\n    setDescription,\n    credit,\n    setCredit,\n    debit,\n    setDebit,\n    credits,\n    setCredits,\n    debits,\n    setDebits,\n    totalCredits,\n    setTotalCredits,\n    totalDebits,\n    setTotalDebits,\n    balance,\n    setBalance,\n    categorias,\n    setCategorias,\n    diasDaSemana,\n    setDiasDaSemana,\n    loadCategories,\n    loadCredits,\n    loadDebits,\n    loadTransactions\n  };\n}\n\n_s(useTasksListProvider, \"wgCXYQmRAFtJEsSLVpIPvyzWC4g=\");\n\nexport default useTasksListProvider;","map":{"version":3,"sources":["/home/jessiezan/Desktop/CubosAcademy+Ifood/Desafio-Front-m3/app-controle-financeiro/src/hooks/useTasksListProvider.js"],"names":["useState","useTasksListProvider","showFiltro","setShowFiltro","showModal","setShowModal","transactions","setTransactions","transactionsOriginal","settransactionsOriginal","transacInEditing","setTransacInEditing","value","setValue","category","setCategory","date","setDate","description","setDescription","credit","setCredit","debit","setDebit","credits","setCredits","debits","setDebits","totalCredits","setTotalCredits","totalDebits","setTotalDebits","balance","setBalance","categorias","setCategorias","diasDaSemana","setDiasDaSemana","useEffect","loadTransactions","reduce","total","item","loadCategories","newCategories","map","transaction","uniqueCategories","Set","loadCredits","filter","type","loadDebits","response","fetch","method","data","json","console","log","error","message"],"mappings":"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","sourcesContent":["import { useState } from 'react'\n\nfunction useTasksListProvider() {\n  const [showFiltro, setShowFiltro] = useState(false)\n  const [showModal, setShowModal] = useState(false)\n  const [transactions, setTransactions] = useState([])\n  const [transactionsOriginal, settransactionsOriginal] = useState([])\n  const [transacInEditing, setTransacInEditing] = useState(false)\n  const [value, setValue] = useState('')\n  const [category, setCategory] = useState('')\n  const [date, setDate] = useState('')\n  const [description, setDescription] = useState('')\n  const [credit, setCredit] = useState(false)\n  const [debit, setDebit] = useState(true)\n\n  const [credits, setCredits] = useState([])\n  const [debits, setDebits] = useState([])\n\n  const [totalCredits, setTotalCredits] = useState(0)\n  const [totalDebits, setTotalDebits] = useState(0)\n\n  const [balance, setBalance] = useState(0)\n\n  const [categorias, setCategorias] = useState([])\n\n  const [diasDaSemana, setDiasDaSemana] = useState([\n    'Domingo',\n    'Segunda',\n    'Terça',\n    'Quarta',\n    'Quinta',\n    'Sexta',\n    'Sábado',\n  ])\n\n  useEffect(() => {\n    loadTransactions()\n    // loadCredits(transactions)\n    // loadDebits(transactions)\n  }, [])\n\n  useEffect(() => {\n    setTotalCredits(credits.reduce((total, item) => total + item.value, 0))\n    setTotalDebits(debits.reduce((total, item) => total + item.value, 0))\n    setBalance(totalCredits - totalDebits)\n  }, [credits, debits])\n\n  useEffect(() => {\n    setBalance(totalCredits - totalDebits)\n  }, [totalCredits, totalDebits])\n\n  async function loadCategories(transactions) {\n    const newCategories = transactions.map(\n      (transaction) => transaction.category,\n    )\n    const uniqueCategories = [...new Set(newCategories)]\n    setCategorias(uniqueCategories)\n  }\n\n  async function loadCredits(transactions) {\n    setCredits(\n      transactions.filter((transaction) => transaction.type === 'credit'),\n    )\n  }\n\n  async function loadDebits(transactions) {\n    setDebits(\n      transactions.filter((transaction) => transaction.type === 'debit'),\n    )\n  }\n\n  async function loadTransactions() {\n    try {\n      const response = await fetch('http://localhost:3333/transactions', {\n        method: 'GET',\n      })\n      const data = await response.json()\n      setTransactions(data)\n      settransactionsOriginal(data)\n      loadCredits(data)\n      loadDebits(data)\n      loadCategories(data)\n      console.log(data)\n    } catch (error) {\n      console.log(error.message)\n    }\n  }\n  return {\n    showFiltro,\n    setShowFiltro,\n    showModal,\n    setShowModal,\n    transactions,\n    setTransactions,\n    transactionsOriginal,\n    settransactionsOriginal,\n    transacInEditing,\n    setTransacInEditing,\n    value,\n    setValue,\n    category,\n    setCategory,\n    date,\n    setDate,\n    description,\n    setDescription,\n    credit,\n    setCredit,\n    debit,\n    setDebit,\n    credits,\n    setCredits,\n    debits,\n    setDebits,\n    totalCredits,\n    setTotalCredits,\n    totalDebits,\n    setTotalDebits,\n    balance,\n    setBalance,\n    categorias,\n    setCategorias,\n    diasDaSemana,\n    setDiasDaSemana,\n    loadCategories,\n    loadCredits,\n    loadDebits,\n    loadTransactions,\n  }\n}\n\nexport default useTasksListProvider\n"]},"metadata":{},"sourceType":"module"}